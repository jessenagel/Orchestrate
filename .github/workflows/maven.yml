# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

permissions:
  contents: write  # This grants write permissions to contents
  packages: write  # Needed for creating a release

on:
  push:
    tags:
      - 'v*' # Only execute when pushing a tag that matches v*

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up maven
        run: |
          sudo apt-get update
          sudo apt-get install -y maven wget
      - name: Download and install jhighs
        run: |
          if wget https://github.com/jessenagel/JHiGHS/releases/download/v0.1.0/jhighs-0.1.0.jar; then
            echo "Download successful"
            ls -la jhighs-0.1.0.jar
          else
            echo "Download failed"
            exit 1
          fi
          
          mvn install:install-file \
            -Dfile=jhighs-0.1.0.jar \
            -DgroupId=nl.jessenagel.optimization \
            -DartifactId=jhighs \
            -Dversion=0.1.0 \
            -Dpackaging=jar

      - name: Verify jhighs installation
        run: |
          mvn dependency:list | grep jhighs || echo "jhighs not found in dependencies"
          ls -la ~/.m2/repository/org/jessenagel/jhighs/ || echo "jhighs not in local repository"
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Install HiGHS
        run: |
          curl -sL https://github.com/JuliaBinaryWrappers/HiGHSstatic_jll.jl/releases/download/HiGHSstatic-v1.10.0%2B0/HiGHSstatic.v1.10.0.x86_64-linux-gnu-cxx03.tar.gz -o highs.tar.gz
          mkdir /opt/HiGHS
          tar -xf highs.tar.gz -C /opt/HiGHS
          rm highs.tar.gz
          mkdir -p $HOME/bin
          ln -s /opt/HiGHS/bin/highs $HOME/bin/highs
          echo "$HOME/bin" >> $GITHUB_PATH
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            This release was automatically generated by GitHub Actions.
          draft: true
          prerelease: true
      - run: |
          ARTIFACT_PATHNAME=$(ls target/orchestrate-*.jar | head -n 1)
          ARTIFACT_NAME=$(basename $ARTIFACT_PATHNAME)
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> $GITHUB_ENV
          echo "ARTIFACT_PATHNAME=${ARTIFACT_PATHNAME}" >> $GITHUB_ENV

      - name: Upload JAR file to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARTIFACT_PATHNAME }}  # Replace with your actual jar file name
          asset_name: ${{ env.ARTIFACT_NAME }} # Replace with your actual jar file name
          asset_content_type: application/java-archive